"""Quiz 1, quiz 2."""

# quiz1
#
# Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# <p> 0:08 заходим в чатик HomeWork, там будет ник и сообщение "прими пул" == значит домашка пришла <p>
#
# 2) Как принять домашку?
# <p> 0:17 Заходим в Github Desktop, нажимаем 'pull origin', затем 'fetch origin' ==> <p>
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# <p> 0:28 смотрим history, смотрим на коммиты - самый верхний = самый свежий коммит, заходим в него и смотрим, что там произошло. Лучше всего просматривать и другие коммиты, возможно там тоже есть что-то интересное. Когда нажимаем на коммит - видим изменения в файле. <p>
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# <p> 3:45 - После отправки коммита, заходим в history и видим, что мы отправили коммит. Нажимаем на коммит правой кнопкой и нажимаем "View on GitHub". Откроется страничка, оттуда копируем ссылку и отправляем в чат телеграмма HomeWork (коммит отдал + ссылка на коммит) <p>
#
# 4) Что такое файл лога?
# <p> 1:05 - это файл вида log.ipynb, который нужно заполнять в конце каждого урока. В файле должна быть дата урока и что было сделано в течение урока, что запомнили тезисно. <p>
#
# 4.1) Когда нужно его пушить?
# <p> 12:25 - когда проверили файл на ошибки и исправили их <p>
#
# 5) Что такое интерпритатор?
# <p> 2.48 - это программа, которая читает и запускает наш код (Python Environment, anaconda) <p>
#
# 6) Где можно выбрать интерпритатор?
# <p> 2:39 - после выполнения домашки нажимаем крутилку Execute cell и вверху выбираем интерпретатор, либо с помощью кнопки справа сверху 'base Python ...' + выбираем anaconda <p>
#
# 7) Что такое модуль?
# <p> 8:47 - это обычный файлик .py или .ipynb <p>
#
# 8) Как создать и отправить коммит?
# <p> 3:12 - когда сделали домашку, заходим в GitHub Desktop, она там уже появится, все изменения уже отображены, ==> далее пишем название коммита (выполнили 1 главу) ==> нажимаем "commit to main" и делаем 'push origin'. <p>
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# <p> 3:45 - Заходим в history и видим, что мы отправили коммит. Нажимаем на коммит правой кнопкой и нажимаем "View on GitHub" <p>
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# <p> 5:10 error <p>
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику. <p>
# <p> ms-python.pylint - строгий линтер для Python, проверяет стиль, синтаксис и потенциальные ошибки в коде по стандарту PEP8 <p>
# <p> ms-python.flake8 - легковесный линтер, проверяющий стиль кода и простые ошибки, можно гибко настраивать под проект <p>
# <p> ms-python.mypy-type-checker - анализатор типов, проверяет соответствие типов, указанных в аннотациях, реальному использованию в коде <p>
# <p> matangover.mypy - дополнение для интеграции mypy с VS Code, облегчает настройку и отображение ошибок типов прямо в редакторе <p>
# <p> ms-pyright.pyright - сверхбыстрый анализатор типов и ошибок в Python, хорошо работает с большими проектами и поддерживает type hints <p>
# <p> ms-python.black-formatter - автоматически форматирует код по стандарту Black — строго, чётко, без лишних настроек <p>
# <p> njpwerner.autodocstring - автоматически генерирует docstring-и (документацию к функциям) по стандарту Google или NumPy <p>
# <p> njqdev.vscode-python-typehint - подсказывает и автоматически добавляет type hints в Python-код, ускоряя типизацию <p>
# <p> KevinRose.vsc-python-indent - улучшает автоматическое выравнивание и отступы в Python-коде, делает табуляцию умнее <p>
# <p> mintlify.document - автоматически генерирует документацию к функциям и классам на основе кода и комментариев <p>
# <p> streetsidesoftware.code-spell-checker - проверяет орфографию в коде, комментариях и строках, помогает избегать опечаток <p>
# <p> eamodio.gitlens - расширяет возможности Git прямо в VS Code: история, авторство строк, сравнение коммитов <p>
# <p> ms-toolsai.jupyter - обеспечивает полноценную работу с Jupyter ноутбуками в VS Code — запуск кода, ячейки, вывод <p>
# <p> ms-vsliveshare.vsliveshare - даёт возможность совместной работы в реальном времени в одном проекте, как Google Docs для кода <p>
# <p> EricSia.pythonsnippets3 - набор полезных сниппетов (заготовок кода) для Python — функции, конструкции, шаблоны <p>
# <p> congyiwu.vscode-jupytext - позволяет редактировать Jupyter ноутбуки как обычные .py или .md файлы, синхронизируя содержимое <p>
# <p> streetsidesoftware.code-spell-checker-russian - дополнение к spell checker’у, добавляющее поддержку проверки орфографии на русском языке <p>
#
# 11) Как узнать какой именно линтер не прошёл проверку?
# <p> 5:30 справа будет название линтера ......... failed <p>
#
# 12) Линтер Pylint видит markdown?
# <p> 7:27 нет, он их игнорирует <p>
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# <p> 6:55 - если ячейка будет markdown, то иногда могут быть расхождения в ячейках, потому что линтер не видит markdown <p>
#
# 14) Где посмотреть номер ячейки в vscode?
# <p> 6:41 - внизу справа (cell 1 of 1) <p>
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# <p> Файл .ipynb отправляется в GitHub как текстовый JSON-файл <p>
#
# 16) Где посмотреть в какой ячейке ошибка?
# <p> 5:35 - внизу будет написано название файла и номер ячейки, где произошла ошибка - например, cell_1.0 <p>
#
# 17) Как запустить терминал?
# <p> 5:57 - в VS Code вверху есть кнопочка "Terminal" ==> New terminal <p>
#
# 18) Что такое линтер?
# <p> 6:13 - это программа, которая проверяет ваш файл на корректность <p>
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# <p> 8:11 - pylint.pycqa.org <p>
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# <p> 10:05 - после исправления ошибок по pylint <p>
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# <p> 9:25 - описание модуля - какая информация содержится в файле (краткое содержание) <p>
#
# 21) С какой  git команды начинается утро программиста?
# <p> с команды git pull, чтобы забрать последние изменения из удалённого репозитория <p>
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# <p> 14:09 - навести на current repository и правой кнопкой мыши нажать на 'open in Visual Studio Code' <p>
#
# 23) Что такое stash?
#  Общее объяснение концепции.
#  <p> 15:20 - stash changes говорит о том, что два человека работают в одном файле в интернете и на локальном компьютере.
#  Это значит, что GitHub просит вас сохранить временные изменения в буфер обмена.
#  Локальные изменения сохраняются в буфер обмена и тем временем принимаются с интернета изменения <p>
#
# 23.1) Как сохранить стэш?
# <p> git командa(подсказка: https://t.me/c/1937296927/3602/19531):
# команда: git stash <p>
#  <p> Кнопка в vs code:
# в VS Code: открываем вкладку Source Control → три точки → “Stash” → “Stash changes” <p>
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
# git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# <p> git stash apply — восстанавливает последние сохранённые изменения из стэша. <p>
# <p> git stash apply stash@{n} — восстанавливает конкретный стэш по номеру. <p>
#
# 23.3) Различие между стэшем и коммитом.
#  Когда лучше сохранить изменения в стэше, а когда коммитить.
# <p> Стэш — это временное сохранение изменений, которые не готовы к коммиту. Коммит сохраняет изменения в историю проекта и готов к отправке в репозиторий. Сохранять в стэше нужно, если нужно временно скрыть изменения, а коммитить — когда изменения готовы и нужно их зафиксировать. <p>
#
# 23.4) Как просмотреть список сохраненных стэшей?
#  <p> git команда (подсказка: https://t.me/c/1937296927/3602/19531): git stash list <p>
#
# 23.5) Как удалить стэш?
#  Команды для удаления отдельных стэшей или всех сразу.
#  git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# <p> Удалить последний стэш:  git stash drop <p>
# <p> Удалить конкретный стэш по индексу (например, стэш с номером n): git stash drop stash@{n} <p>
# <p> Удалить все стэши: git stash clear <p>
#
# 23.6) Практические примеры использования стэша.
#  Краткие сценарии, где стэш помогает.
# <p> При переключении на другую ветку, чтобы не коммитить незавершённые изменения, можно временно спрятать их в стэш. <p>
# <p> Когда нужно быстро исправить баг в другой ветке, но не завершена работа в текущей, изменения можно сохранить в стэше и вернуться к ним позже. <p>
#
# 24) Где посмотреть что есть конфликт в файлах?
# <p> 16:15 - появляется восклицательный знак справа от файлика <p>
#
# 24.1) Когда он появляется?
# <p> 16:15 когда два человека работают в одном репозитории и гитхаб не понимает, какие именно изменения нужно сохранить <p>
#
# 25) Как решить конфликт в файлах?
# <p> 16:40 - можно просто нажать кнопку 'accept current change' - примется то, что пришло с интернета, или <p>
# <p> 'accept incoming change' - примется локальные изменения на компьютере, или <p>
# <p> 'accept both changes' <p>
# <p> 17:18 - можно также вручную устранять конфликты - удалять то, что не нужно и нажимать 'Resolve in Merge Editor' <p>
#
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# <p> 16:30 - Зелёное то что пришло с гитхаба и синее локальные изменения <p>
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# <p> да, после stash можно сделать pull, чтобы избежать конфликта, если вы работаете в одном файле <p>
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# <p> если были изменения в одних и тех же строках, может снова возникнуть конфликт, и его придётся решать вручную <p>
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# <p> 4: 16:40 - можно просто нажать кнопку 'accept current change' - примется то, что пришло с интернета, или <p>
# <p> 'accept incoming change' - примется локальные изменения на компьютере, или <p>
# <p> 'accept both changes' <p>
# <p> 17:18 - можно также вручную устранять конфликты - удалять то, что не нужно и нажимать 'Resolve in Merge Editor' <p>
#
# 29) Что делает кнопка complete merge?
# <p> 17:39 - чтобы сохранить изменения после accept current change и устранить конфликт (завершает объединение после того, как все конфликты решены) <p>
#
# 30) В какой чат нужно писать если остались вопросы?
# <p> 18:30 - пишем в чат HELP ME <p>
#
# 31) Что такое FORK? Зачем его делают?
# <p> 19:02 - чтобы скопировать чужой репозиторий и сделать его личным <p>
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# <p> 19:30 - нужно зайти на GitHub Desktop и склонировать этот репозиторий к себе в личный аккаунт. Add ==> Clone a repository ==> выбираем нужный репозиторий и списка ==> Clone <p>
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# <p> 12:48 с вероятностью 90% ошибки были решены Русланом или другими студентами <p>
#
# 34) Как создать файл в vs code?
# <p> 0:54 два листочка ⇒ нажимаем на листочек с плюсиком - New File - даем название <p>
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# <p> 1.05 - да <p>
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
# <p> jupyter nbconvert --to script your_notebook.ipynb <p>
# <p> или jupyter nbconvert --to python your_notebook.ipynb <p>
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# <p> Пакетный менеджер — это инструмент, который помогает устанавливать, обновлять и управлять библиотеками и пакетами в Python.
# Для дата-сайенс чаще всего используется conda, так как она управляет не только Python-пакетами, но и зависимостями, такими как библиотеки, связанные с C++ или другими языками, что важно для работы с большими наборами данных и вычислениями. <p>
#
# 3) Почему расширение py лучше чем ipynb?
# <p> Расширение .py используется для обычных Python-скриптов и лучше для продакшн-кода, так как его можно интегрировать в проекты, запускать на сервере или в других средах.
# .ipynb — это формат для работы в Jupyter Notebooks и предназначен для интерактивной работы, что удобно для анализа и визуализации данных, но не так подходит для продакшн-кода. <p>
#
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# <p> PEP8 — это официальное руководство по стилю кода для Python. Оно описывает рекомендации по форматированию кода (например, отступы, максимальная длина строки, наименования переменных и функций) <p>
#
# 4.1) линтеры проверяют на соблюдение pep8?
# <p> Да, линтеры, такие как pylint, flake8, проверяют код на соответствие стандартам PEP8, включая стиль, отступы, длину строк и другие аспекты <p>
#
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# <p> Для переменных в Python используется нотация snake_case, то есть, имена переменных пишутся маленькими буквами, слова разделяются нижним подчеркиванием (_), например my_variable <p>
#
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# <p> Да, переменная может быть одной буквой или, например, _. Однако _ часто используется для обозначения переменной, значение которой не нужно (например, в цикле). <p>
#
# 4.4) Зачем и где мы используем андерскор _
# <p> Андерскор (_) используется в Python в нескольких случаях: <p>
# <p> Для обозначения "неиспользуемых" переменных в цикле или функции, например for _ in range(10): <p>
# <p> В качестве имени переменной, когда мы хотим скрыть значение или использовать его временно (например, result = _). <p>
# <p> В интерактивной оболочке Python используется для хранения последнего результата вычислений. <p>
#
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# <p> Да, переменные в одну букву допустимы, но они должны быть осмысленными и использоваться в контекстах, где это уместно, например, в итераторах или в качестве временных значений. <p>
#

# <p> quiz2 <p>
#
# Список вопросов к видео https://t.me/c/1937296927/765/29781 (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# <p> 0:08 File - Auto Save <p>
#
# 2. Как настроить перенос строки?
# <p> 0:15 Preferences - Setting - wrap - wordWrapColumn <p>
#
# 3. Сколько символов по pep8 разрешено на строке?
# <p> 1:27 79 символов <p>
#
# 4. Какие способы переноса строк показаны в видео:
# <p> 1:55 комментарии разбивать на разные строки с помощью # <p>
# <p> 2:12 если это код, то оборачиваем значение в круглые скобки () и делаем перенос <p>
# <p> 2:47 если строка очень большая, можно разбить ее на переменные и использовать конкатенацию строк (name_sum = name1 + name2) <p>
#
#
# нет 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# нет 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# нет 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# да 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# нет 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# да 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# <p> 4:44 в VS code в нижней панели где terminal - PROBLEMS <p>
#
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# <p> 6:24 слева на панели три кружочка Source Control. В разделе Commits можно делать то же самое, что и в кошке - отдавать и принимать коммиты и т.д. Отправить коммит - commit & push или отдельно push, принять домашку - pull. <p>
# <p> Коммиты также можно смотреть внизу - gitlines (рядом с terminal) <p>
#
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# <p> Git — это система контроля версий, которая отслеживает изменения в файлах и позволяет вернуться к любой точке истории проекта<p>
# <p> Да, Git работает локально — всё хранится на вашем компьютере, и вы можете посмотреть историю изменений и вернуться к любому коммиту <p>
#
# 8. Как вставить картинку в маркдаун?
# <p> 7:55 с помощью cntr + V добавляется картинка (скриншот) <p>
#
# 9. Где посмотреть длину строки в vs code?
# <p> 1:04 копируем нужную строку, создаем любой файл с расширением .py, вставляем строку, выделяем ее и видим длину строки (внизу странички) <p>
#
# 10. Как поменять тип ячейки с питона на маркдаун?
# <p> 7:43 по умолчанию выбирается ячейка python, нужно нажать на python (справа внизу ячейки) и перевыбрать markdown <p>
#
# 11. Как запустить сразу все ячейки в юпитере?
# <p> 8:28 с помощью кнопки run all <p>
#
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# <p> 8:11 чтобы изменить размер, нужно вставить ее в тэг (<img hre…), нужно подучить тэги <p>
#
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# <p> 8:42 нажимаем shift + enter <p>
#
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# <p> 9:02 справа от ячейки три точки → Show Cell Line Numbers <p>
#
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# <p> 9:20 показывает какая ячейка у нас отвалилась, нажимаем на Go To и нас автоматически перебрасывает на ошибочную ячейку <p>
#
# 16. Как очистить вывод ячеек которые уже запущены?
# <p> 10:47 нажимаем Clear All Outputs (вверху на панели) <p>
#
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# <p> 10:55 вверху справа кнопка Split Editor Right <p>
#
# 18. Каким сочетанием убирается левый сайдбар?
# <p> 11:20 убирается сочетанием cntr + b <p>
#
# 19. Кнопка два листочка это наши локальные файлы?
# <p> 11:35 да <p>
#
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# <p> 10:11 он не понимает, что такое Dict (Dict is not defined) <p>
#
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# <p> да <p>
#
# 22. Что такое валидация?
# <p> 9:52 ноутбук валидирован значит код написан идеально <p>
#
# 23. Что такое трассировка ошибки?
# <p> 10:02 это визуальное представление ошибки (traceback) <p>
#
# 24. Что значит отвалился интерпритатор?
# <p> 10:25 появилась ошибка <p>
#
#
# Отвечаете на вопросы в вашем редакторе кода.
#
